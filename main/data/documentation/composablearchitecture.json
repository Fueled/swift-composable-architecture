{"topicSections":[{"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ"],"anchor":"Essentials"},{"anchor":"Tutorials","identifiers":["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"],"title":"Tutorials"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"],"title":"State management","anchor":"State-management"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"],"anchor":"Testing","title":"Testing"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"anchor":"Integrations","title":"Integrations"},{"title":"Migration guides","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"],"anchor":"Migration-guides"},{"anchor":"Functions","generated":true,"title":"Functions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/withTaskCancellation(id:cancelInFlight:isolation:operation:)"]},{"title":"Enumerations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"],"generated":true,"anchor":"Enumerations"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Perception","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftNavigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUICore"],"title":"Extended Modules","anchor":"Extended-Modules","generated":true}],"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"Additional-Resources","text":"Additional Resources"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"https:\/\/www.pointfree.co\/collections\/composable-architecture","isActive":true}],"type":"paragraph"}]}]},{"text":"Overview","level":2,"anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This library provides a few core tools that can be used to build applications of varying purpose and"},{"text":" ","type":"text"},{"type":"text","text":"complexity. It provides compelling stories that you can follow to solve many problems you encounter"},{"text":" ","type":"text"},{"type":"text","text":"day-to-day when building applications, such as:"}]},{"items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"State management","type":"text"}]}],"type":"paragraph"},{"inlineContent":[{"text":"How to manage the state of your application using simple value types, and share state across","type":"text"},{"text":" ","type":"text"},{"text":"many screens so that mutations in one screen can be immediately observed in another screen.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Composition"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"How to break down large features into smaller components that can be extracted to their own,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isolated modules and be easily glued back together to form the feature."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Side effects"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"How to let certain parts of the application talk to the outside world in the most testable and"},{"type":"text","text":" "},{"text":"understandable way possible.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Testing"}],"type":"strong"}],"type":"paragraph"},{"inlineContent":[{"text":"How to not only test a feature built in the architecture, but also write integration tests for","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"features that have been composed of many parts, and write end-to-end tests to understand how"},{"text":" ","type":"text"},{"text":"side effects influence your application. This allows you to make strong guarantees that your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"business logic is running in the way you expect."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Ergonomics","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"How to accomplish all of the above in a simple API with as few concepts and moving parts as"},{"text":" ","type":"text"},{"type":"text","text":"possible."}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"seeAlsoSections":[{"abstract":[{"type":"text","text":"The collection of videos from "},{"isActive":true,"type":"reference","identifier":"https:\/\/www.pointfree.co"},{"text":" that dive deep into the","type":"text"},{"type":"text","text":" "},{"text":"development of the library.","type":"text"}],"anchor":"Related-Documentation","identifiers":["https:\/\/www.pointfree.co\/collections\/composable-architecture"],"title":"Related Documentation"}],"kind":"symbol","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture"]}],"metadata":{"title":"ComposableArchitecture","modules":[{"name":"ComposableArchitecture"}],"externalID":"ComposableArchitecture","role":"collection","roleHeading":"Framework","symbolKind":"module"},"hierarchy":{"paths":[[]]},"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"kind":"article","title":"Sharing state","role":"collectionGroup","abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/sharingstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/withTaskCancellation(id:cancelInFlight:isolation:operation:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withTaskCancellation","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"id"},{"kind":"text","text":": some "},{"text":"Hashable","preciseIdentifier":"s:SH","kind":"typeIdentifier"},{"text":" & ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"cancelInFlight"},{"kind":"text","text":": "},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"isolation","kind":"externalParam"},{"kind":"text","text":": "},{"text":"isolated","kind":"keyword"},{"text":" (any ","kind":"text"},{"text":"Actor","kind":"typeIdentifier","preciseIdentifier":"s:ScA"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"text":": () ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/withtaskcancellation(id:cancelinflight:isolation:operation:)","title":"withTaskCancellation(id:cancelInFlight:isolation:operation:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/withTaskCancellation(id:cancelInFlight:isolation:operation:)","abstract":[{"text":"Execute an operation with a cancellation identifier.","type":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"url":"\/documentation\/composablearchitecture\/swiftconcurrency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"title":"Adopting Swift concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","role":"article","title":"Observation backport","url":"\/documentation\/composablearchitecture\/observationbackport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"navigatorTitle":[{"kind":"identifier","text":"Effect"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any reducer."}],"title":"Dependencies","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","role":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"kind":"article","title":"Getting started","abstract":[{"text":"Learn how to integrate the Composable Architecture into your project and write your first","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"application."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","url":"\/documentation\/composablearchitecture\/gettingstarted","role":"article"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","type":"topic","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"text":" ","type":"text"},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"title":"Meet the Composable Architecture","url":"\/tutorials\/meetcomposablearchitecture","role":"overview","kind":"overview"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"url":"\/documentation\/composablearchitecture\/identifiedaction","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"abstract":[{"text":"A wrapper type for actions that can be presented in a list.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IdentifiedAction"}],"role":"symbol","kind":"symbol","type":"topic","title":"IdentifiedAction"},"https://github.com/pointfreeco/swift-composable-architecture/discussions":{"title":"Discussions","titleInlineContent":[{"type":"text","text":"Discussions"}],"url":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Perception":{"title":"Perception","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Perception","type":"topic","role":"collection","url":"\/documentation\/composablearchitecture\/perception","kind":"symbol"},"https://www.pointfree.co/collections/composable-architecture":{"title":"Point-Free Videos","titleInlineContent":[{"text":"Point-Free Videos","type":"text"}],"url":"https:\/\/www.pointfree.co\/collections\/composable-architecture","type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/composable-architecture"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"kind":"overview","url":"\/tutorials\/buildingsyncups","abstract":[{"type":"text","text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"text":"domain modeling, controlling dependencies, and testability.","type":"text"}],"role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","title":"Building SyncUps","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"role":"article","url":"\/documentation\/composablearchitecture\/performance","type":"topic","abstract":[{"text":"Learn how to improve the performance of features built in the Composable Architecture.","type":"text"}],"title":"Performance","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"title":"Store","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/store","navigatorTitle":[{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FAQ":{"role":"article","abstract":[{"type":"text","text":"A collection of some of the most common questions and comments people have concerning the library."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ","url":"\/documentation\/composablearchitecture\/faq","kind":"article","type":"topic","title":"Frequently asked questions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUICore":{"type":"topic","title":"SwiftUICore","url":"\/documentation\/composablearchitecture\/swiftuicore","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUICore","role":"collection","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","title":"TestStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"type":"text","text":"s should be executed later by the store, if any."}],"title":"Reducer","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftNavigation","role":"collection","abstract":[],"type":"topic","url":"\/documentation\/composablearchitecture\/swiftnavigation","kind":"symbol","title":"SwiftNavigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/uikit","title":"UIKit Integration","abstract":[{"text":"Integrating the Composable Architecture into a UIKit application.","type":"text"}],"kind":"article"},"https://github.com/pointfreeco/swift-composable-architecture":{"title":"GitHub Repo","titleInlineContent":[{"type":"text","text":"GitHub Repo"}],"url":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-composable-architecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","url":"\/documentation\/composablearchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"kind":"article","url":"\/documentation\/composablearchitecture\/navigation","title":"Navigation","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","type":"topic","role":"collectionGroup","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"text":" ","type":"text"},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}]}}}