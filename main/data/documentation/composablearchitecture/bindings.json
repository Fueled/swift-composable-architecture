{"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/bindings"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Article","title":"Working with SwiftUI bindings","role":"article","modules":[{"name":"ComposableArchitecture"}]},"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Many APIs in SwiftUI use bindings to set up two-way communication between your application’s state"},{"type":"text","text":" "},{"text":"and a view. The Composable Architecture provides several tools for creating bindings that establish","type":"text"},{"text":" ","type":"text"},{"text":"such communication with your application’s store.","type":"text"}]},{"text":"Ad hoc bindings","anchor":"Ad-hoc-bindings","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"The simplest tool for creating bindings that communicate with your store is to create a dedicated"},{"type":"text","text":" "},{"text":"action that can change a piece of state in your feature. For example, a reducer may have a domain","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that tracks if the user has enabled haptic feedback. First, it can define a boolean property on"},{"type":"text","text":" "},{"text":"state:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  struct State: Equatable {","    var isHapticsEnabled = true","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then, in order to allow the outside world to mutate this state, for example from a toggle, it must"},{"text":" ","type":"text"},{"text":"define a corresponding action that can be sent updates:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  struct State: Equatable { \/* ... *\/ }","","  enum Action { ","    case isHapticsEnabledChanged(Bool)","    \/\/ ...","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"When the reducer handles this action, it can update state accordingly:"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let .isHapticsEnabledChanged(isEnabled):","        state.isHapticsEnabled = isEnabled","        return .none","      \/\/ ...","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And finally, in the view, we can derive a binding from the domain that allows a toggle to"},{"type":"text","text":" "},{"type":"text","text":"communicate with our Composable Architecture feature. First you must hold onto the store in a"},{"type":"text","text":" "},{"type":"text","text":"bindable way, which can be done using the "},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper from SwiftUI:","type":"text"}],"type":"paragraph"},{"code":["struct SettingsView: View {","  @Bindable var store: StoreOf<Settings>","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"text":"If you are targeting older Apple platforms (iOS 16, macOS 13, tvOS 16, watchOS 9, or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"less), then you must use our backport of the "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper:"}]},{"code":["-@Bindable var store: StoreOf<Settings>","+@Perception.Bindable var store: StoreOf<Settings>"],"type":"codeListing","syntax":"diff"}],"name":"Important","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once that is done you can derive a binding to a piece of state that sends an action when the"},{"text":" ","type":"text"},{"text":"binding is mutated:","type":"text"}]},{"code":["var body: some View {","  Form {","    Toggle(","      \"Haptic feedback\",","      isOn: $store.isHapticsEnabled.sending(\\.isHapticsEnabledChanged)","    )","","    \/\/ ...","  }","}"],"syntax":"swift","type":"codeListing"},{"anchor":"Binding-actions-and-reducers","type":"heading","text":"Binding actions and reducers","level":3},{"inlineContent":[{"text":"Deriving ad hoc bindings requires many manual steps that can feel tedious, especially for screens","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with many controls driven by many bindings. Because of this, the Composable Architecture comes with"},{"type":"text","text":" "},{"type":"text","text":"tools that can be applied to a reducer’s domain and logic to make this easier."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, a settings screen may model its state with the following struct:"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State {","    var digest = Digest.daily","    var displayName = \"\"","    var enableNotifications = false","    var isLoading = false","    var protectMyPosts = false","    var sendEmailNotifications = false","    var sendMobileNotifications = false","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The majority of these fields should be editable by the view, and in the Composable Architecture this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"means that each field requires a corresponding action that can be sent to the store. Typically this"},{"type":"text","text":" "},{"text":"comes in the form of an enum with a case per field:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","","  enum Action {","    case digestChanged(Digest)","    case displayNameChanged(String)","    case enableNotificationsChanged(Bool)","    case protectMyPostsChanged(Bool)","    case sendEmailNotificationsChanged(Bool)","    case sendMobileNotificationsChanged(Bool)","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And we’re not even done yet. In the reducer we must now handle each action, which simply replaces"},{"type":"text","text":" "},{"text":"the state at each field with a new value:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case let digestChanged(digest):","        state.digest = digest","        return .none","","      case let displayNameChanged(displayName):","        state.displayName = displayName","        return .none","","      case let enableNotificationsChanged(isOn):","        state.enableNotifications = isOn","        return .none","","      case let protectMyPostsChanged(isOn):","        state.protectMyPosts = isOn","        return .none","","      case let sendEmailNotificationsChanged(isOn):","        state.sendEmailNotifications = isOn","        return .none","","      case let sendMobileNotificationsChanged(isOn):","        state.sendMobileNotifications = isOn","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"This is a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"lot"}]},{"type":"text","text":" of boilerplate for something that should be simple. Luckily, we can dramatically"},{"text":" ","type":"text"},{"type":"text","text":"eliminate this boilerplate using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, we can conform the action type to "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true,"type":"reference"},{"text":" by collapsing all of the individual,","type":"text"},{"type":"text","text":" "},{"text":"field-mutating actions into a single case that holds a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"text":" that is generic over the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"reducer’s state:"}]},{"code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then, we can simplify the settings reducer by adding a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" that handles these"},{"type":"text","text":" "},{"type":"text","text":"field mutations for us:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Settings {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action: BindableAction { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    BindingReducer()","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then in the view you must hold onto the store in a bindable manner, which can be done using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper (or the backported tool "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":" if targeting older"},{"text":" ","type":"text"},{"type":"text","text":"Apple platforms):"}]},{"type":"codeListing","syntax":"swift","code":["struct SettingsView: View {","  @Bindable var store: StoreOf<Settings>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Then bindings can be derived from the store using familiar ","type":"text"},{"code":"$","type":"codeVoice"},{"text":" syntax:","type":"text"}]},{"code":["TextField(\"Display name\", text: $store.displayName)","Toggle(\"Notifications\", text: $store.enableNotifications)","\/\/ ..."],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Should you need to layer additional functionality over these bindings, your can pattern match the"},{"text":" ","type":"text"},{"type":"text","text":"action for a given key path in the reducer:"}]},{"code":["var body: some Reducer<State, Action> {","  BindingReducer()","","  Reduce { state, action in","    switch action","    case .binding(\\.displayName):","      \/\/ Validate display name","  ","    case .binding(\\.enableNotifications):","      \/\/ Return an effect to request authorization from UNUserNotificationCenter","  ","    \/\/ ...","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Or you can apply ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","isActive":true,"type":"reference"},{"type":"text","text":" to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","isActive":true,"type":"reference"},{"text":" to react to changes to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"particular fields:"}]},{"code":["var body: some Reducer<State, Action> {","  BindingReducer()","    .onChange(of: \\.displayName) { oldValue, newValue in","      \/\/ Validate display name","    }","    .onChange(of: \\.enableNotifications) { oldValue, newValue in","      \/\/ Return an authorization request effect","    }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Binding actions can also be tested in much the same way regular actions are tested. Rather than send","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a specific action describing how a binding changed, such as "},{"code":".displayNameChanged(\"Blob\")","type":"codeVoice"},{"type":"text","text":", you will"},{"text":" ","type":"text"},{"text":"send a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true,"type":"reference"},{"type":"text","text":" action that describes which key path is being set to what value, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\.displayName, \"Blob\""},{"type":"text","text":":"}]},{"syntax":"swift","code":["let store = TestStore(initialState: Settings.State()) {","  Settings()","}","","store.send(\\.binding.displayName, \"Blob\") {","  $0.displayName = \"Blob\"","}","store.send(\\.binding.protectMyPosts, true) {","  $0.protectMyPosts = true",")"],"type":"codeListing"}],"kind":"content"}],"kind":"article","seeAlsoSections":[{"anchor":"Bindings","generated":true,"title":"Bindings","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore","title":"ViewStore","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"type":"text","text":" "},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"url":"\/documentation\/composablearchitecture\/bindingreducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","role":"symbol","abstract":[{"text":"A reducer that updates bindable state when it receives binding actions.","type":"text"}],"title":"BindingReducer","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"}],"navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"url":"\/documentation\/composablearchitecture\/bindingaction","title":"BindingAction","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingAction","kind":"identifier"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","url":"\/documentation\/composablearchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"abstract":[{"type":"text","text":"An action type that exposes a "},{"code":"binding","type":"codeVoice"},{"type":"text","text":" case that holds a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference","isActive":true},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindableAction"}],"navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","url":"\/documentation\/composablearchitecture\/bindableaction","kind":"symbol","title":"BindableAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"url":"\/documentation\/composablearchitecture\/swiftuideprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"kind":"article","role":"collectionGroup","type":"topic","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/onChange(of:_:)":{"abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/onchange(of:_:)","title":"onChange(of:_:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/onChange(of:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"V"},{"text":", ","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"of","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup"}}}