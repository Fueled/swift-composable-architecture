{"variants":[{"paths":["\/documentation\/composablearchitecture\/bindingviewstate\/subscript(dynamicmember:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState\/subscript(dynamicMember:)"},"metadata":{"roleHeading":"Instance Subscript","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture16BindingViewStateV13dynamicMemberACyqd__Gs15WritableKeyPathCyxqd__G_tcluip","symbolKind":"subscript","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Subject"},{"kind":"text","text":">("},{"text":"dynamicMember","kind":"externalParam"},{"text":" _: ","kind":"text"},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Subject"},{"text":">) -> ","kind":"text"},{"text":"BindingViewState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStateV"},{"kind":"text","text":"<"},{"text":"Subject","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"subscript(dynamicMember:)","role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Subject"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" "},{"kind":"internalParam","text":"keyPath"},{"text":": ","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Subject","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture16BindingViewStateV","text":"BindingViewState","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},{"text":"<","kind":"text"},{"text":"Subject","kind":"typeIdentifier"},{"kind":"text","text":"> { "},{"kind":"keyword","text":"get"},{"text":" }","kind":"text"}],"languages":["swift"]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"url":"\/documentation\/composablearchitecture\/swiftuideprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"kind":"article","role":"collectionGroup","type":"topic","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState/subscript(dynamicMember:)":{"role":"symbol","kind":"symbol","type":"topic","title":"subscript(dynamicMember:)","url":"\/documentation\/composablearchitecture\/bindingviewstate\/subscript(dynamicmember:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"<"},{"text":"Subject","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"dynamicMember"},{"kind":"text","text":" _: "},{"text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"Subject","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"BindingViewState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16BindingViewStateV"},{"text":"<","kind":"text"},{"text":"Subject","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState\/subscript(dynamicMember:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"abstract":[{"text":"A property wrapper type that can designate properties of view state that can be directly","type":"text"},{"text":" ","type":"text"},{"text":"bindable in SwiftUI views.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingViewState","kind":"identifier"}],"title":"BindingViewState","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingViewState"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingviewstate","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","url":"\/documentation\/composablearchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]}}}