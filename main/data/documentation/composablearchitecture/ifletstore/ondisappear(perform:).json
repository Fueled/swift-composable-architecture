{"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"nonisolated"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"onDisappear","kind":"identifier"},{"text":"(","kind":"text"},{"text":"perform","kind":"externalParam"},{"kind":"text","text":" "},{"text":"action","kind":"internalParam"},{"kind":"text","text":": (() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")? = nil) -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"},{"text":"\n","kind":"text"}],"languages":["swift"]}],"kind":"declarations"}],"metadata":{"title":"onDisappear(perform:)","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"onDisappear"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"perform"},{"text":": (() -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":")?) -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"}],"extendedModule":"SwiftUICore","externalID":"s:7SwiftUI4ViewPAAE11onDisappear7performQryycSg_tF::SYNTHESIZED::s:22ComposableArchitecture10IfLetStoreV","role":"symbol","modules":[{"relatedModules":["SwiftUICore"],"name":"ComposableArchitecture"}],"platforms":[{"deprecated":false,"unavailable":false,"introducedAt":"13.0","name":"iOS","beta":false},{"name":"macOS","deprecated":false,"unavailable":false,"introducedAt":"10.15","beta":false},{"unavailable":false,"beta":false,"deprecated":false,"name":"tvOS","introducedAt":"13.0"},{"deprecated":false,"name":"watchOS","introducedAt":"6.0","beta":false,"unavailable":false}]},"abstract":[{"text":"Inherited from ","type":"text"},{"code":"View.onDisappear(perform:)","type":"codeVoice"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/ifletstore\/ondisappear(perform:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/onDisappear(perform:)"},"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"url":"\/documentation\/composablearchitecture\/swiftuideprecations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","abstract":[{"text":"Review unsupported SwiftUI APIs and their replacements.","type":"text"}],"kind":"article","role":"collectionGroup","type":"topic","title":"Deprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/View-Implementations":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/View-Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/ifletstore\/view-implementations","abstract":[],"role":"collectionGroup","title":"View Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","url":"\/documentation\/composablearchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/onDisappear(perform:)":{"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore\/ondisappear(perform:)","title":"onDisappear(perform:)","kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"onDisappear","kind":"identifier"},{"kind":"text","text":"("},{"text":"perform","kind":"externalParam"},{"text":": (() -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?) -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"preciseIdentifier":"s:7SwiftUI4ViewP","kind":"typeIdentifier","text":"View"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/onDisappear(perform:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IfLetStore"}],"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","kind":"symbol","type":"topic","title":"IfLetStore"}}}