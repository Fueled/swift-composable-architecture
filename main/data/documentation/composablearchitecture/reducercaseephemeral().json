{"abstract":[{"type":"text","text":"Marks the case of an enum reducer as holding onto “ephemeral” state."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/reducercaseephemeral()"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"metadata":{"title":"ReducerCaseEphemeral()","externalID":"s:22ComposableArchitecture20ReducerCaseEphemeralyycfm","symbolKind":"macro","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ReducerCaseEphemeral","kind":"identifier"},{"text":"()","kind":"text"}],"modules":[{"name":"ComposableArchitecture"}],"role":"symbol","roleHeading":"Macro"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()"},"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer(state:action:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducerState"],"anchor":"Enum-reducers","title":"Enum reducers"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"kind":"text","text":"(peer, names: named(`_`)) "},{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ReducerCaseEphemeral"},{"kind":"text","text":"()"}]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"text":"Apply this reducer to any cases of an enum reducer that holds onto state conforming to the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_EphemeralState","isActive":true},{"type":"text","text":" protocol, such as "},{"type":"codeVoice","code":"AlertState"},{"text":" and","type":"text"},{"type":"text","text":" "},{"code":"ConfirmationDialogState","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","enum Destination {","  @ReducerCaseEphemeral","  case alert(AlertState<Alert>)","  \/\/ ...","","  enum Alert {","    case saveButtonTapped","    case discardButtonTapped","  }","}"]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseReducer":{"navigatorTitle":[{"kind":"identifier","text":"CaseReducer"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/casereducer","abstract":[{"text":"A reducer represented by multiple enum cases.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","title":"CaseReducer","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CaseReducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseReducerState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducerState","url":"\/documentation\/composablearchitecture\/casereducerstate","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"CaseReducerState","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"CaseReducerState","kind":"identifier"}],"title":"CaseReducerState","type":"topic","abstract":[{"text":"A state type that is associated with a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseReducer","type":"reference","isActive":true},{"text":".","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseIgnored()":{"title":"ReducerCaseIgnored()","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseIgnored()","abstract":[{"type":"text","text":"Marks the case of an enum reducer as “ignored”, and as such will not compose the case’s domain"},{"text":" ","type":"text"},{"text":"into the rest of the reducer besides state.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducercaseignored()","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ReducerCaseIgnored","kind":"identifier"},{"kind":"text","text":"()"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/_EphemeralState":{"url":"\/documentation\/composablearchitecture\/_ephemeralstate","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"_EphemeralState","kind":"identifier"}],"navigatorTitle":[{"text":"_EphemeralState","kind":"identifier"}],"abstract":[{"text":"Loosely represents features that are only briefly shown and the first time they are interacted","type":"text"},{"text":" ","type":"text"},{"text":"with they are dismissed. Such features do not manage any behavior on the inside.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/_EphemeralState","title":"_EphemeralState","role":"symbol","type":"topic","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerCaseEphemeral()":{"title":"ReducerCaseEphemeral()","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerCaseEphemeral()","abstract":[{"text":"Marks the case of an enum reducer as holding onto “ephemeral” state.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducercaseephemeral()","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ReducerCaseEphemeral","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference"},{"type":"text","text":" protocol for a type."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"navigatorTitle":[{"kind":"identifier","text":"Effect"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer(state:action:)":{"abstract":[{"type":"text","text":"An overload of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"text":" that takes a description of protocol conformances to synthesize on","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the State and Action types"}],"title":"Reducer(state:action:)","url":"\/documentation\/composablearchitecture\/reducer(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer(state:action:)","kind":"symbol","deprecated":true,"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"_SynthesizedConformance","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV"},{"text":"..., ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"_SynthesizedConformance","preciseIdentifier":"s:22ComposableArchitecture23_SynthesizedConformanceV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"type":"text","text":"s should be executed later by the store, if any."}],"title":"Reducer","type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","url":"\/documentation\/composablearchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]}}}