{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/uikit"]}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"],"anchor":"Integrations"}],"metadata":{"role":"collectionGroup","modules":[{"name":"ComposableArchitecture"}],"title":"UIKit Integration","roleHeading":"API Collection"},"kind":"article","primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"While the Composable Architecture was designed with SwiftUI in mind, it comes with tools to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"integrate into application code written in UIKit."}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"topicSections":[{"title":"Combine integration","anchor":"Combine-integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or not, and"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"title":"ifLet(then:else:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":") -> any "},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}],"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","role":"article","title":"Observation backport","url":"\/documentation\/composablearchitecture\/observationbackport"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/swiftuiintegration","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"url":"\/documentation\/composablearchitecture\/swiftconcurrency","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","kind":"article","role":"article","type":"topic","abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"title":"Adopting Swift concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"type":"topic","url":"\/documentation\/composablearchitecture\/store\/publisher","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"title":"publisher","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"kind":"text","text":": "},{"text":"StorePublisher","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","deprecated":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"publisher","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","title":"publisher","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"kind":"symbol","url":"\/documentation\/composablearchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","title":"ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]}}}